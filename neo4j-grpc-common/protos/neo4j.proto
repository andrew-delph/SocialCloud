syntax = "proto3";

package neo4j;

// The greeting service definition.
service Neo4j {
  // Sends a greeting
  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {}

  rpc CreateMatch (CreateMatchRequest) returns (CreateMatchResponse) {}

  rpc UpdateMatch (UpdateMatchRequest) returns (UpdateMatchResponse) {}

  rpc CreateFeedback (CreateFeedbackRequest) returns (StandardResponse) {}

  rpc GetRelationshipScores (GetRelationshipScoresRequest) returns (GetRelationshipScoresResponse) {}

  rpc CheckUserFilters(CheckUserFiltersRequest) returns (CheckUserFiltersResponse) {}

  rpc UpdatePerferences(UpdatePerferencesRequest) returns (StandardResponse) {}

  rpc GetUserPerferences(GetUserPerferencesRequest) returns (GetUserPerferencesResponse) {}

  rpc PutUserPerferences(PutUserPerferencesRequest) returns (PutUserPerferencesResponse) {}

  rpc GetMatchHistory(MatchHistoryRequest) returns (MatchHistoryResponse) {}
}

message CreateUserRequest {
  string user_id = 1;
}

message CreateUserResponse {
  bool error = 1;
  string message = 2;
}


message CreateMatchRequest {
  string user_id1 = 1;
  string user_id2 = 2;
}

message CreateMatchResponse {
  bool error = 1;
  string message = 2;
  string user_id1 = 3;
  string user_id2 = 4;
  string relationship_id1 = 5;
  string relationship_id2 = 6;
}


message UpdateMatchRequest {
  string relationship_id = 1;
  string key = 2;
  string value = 3;
}

message UpdateMatchResponse {
  bool error = 1;
  string message = 2;
}

message GetRelationshipScoresRequest {
  string user_id = 1;
  repeated string other_users = 2;
}

message GetRelationshipScoresResponse {
  bool error = 1;
  string message = 2;
  map<string, Score> relationship_scores = 3;
}

message Score {
  float prob = 1;
  int32 numb_friends = 2;
}

message CheckUserFiltersRequest {
  string user_id1 = 1;
  string user_id2 = 2;
}

message CheckUserFiltersResponse {
  bool error = 1;
  string message = 2;
  bool passed = 3;
}


message StandardResponse {
  bool error = 1;
  string message = 2;
}


message UpdatePerferencesRequest {
  string user_id = 1;
  map<string, string> attributes_constant = 2;
  map<string, string> filters_constant = 3;
  map<string, string> attributes_custom = 4;
  map<string, string> filters_custom = 5;
}

message GetUserPerferencesRequest {
  string user_id = 1;
}

message GetUserPerferencesResponse {
  bool error = 1;
  string message = 2;
  string user_id = 3;
  map<string, string> attributes_constant = 4;
  map<string, string> filters_constant = 5;
  map<string, string> attributes_custom = 6;
  map<string, string> filters_custom = 7;
  float priority = 8;
}


message PutUserPerferencesRequest {
  string user_id = 1;
  map<string, string> attributes_constant = 2;
  map<string, string> filters_constant = 3;
  map<string, string> attributes_custom = 4;
  map<string, string> filters_custom = 5;
}

message PutUserPerferencesResponse {
  bool error = 1;
  string message = 2;
}

message CreateFeedbackRequest {
  string user_id = 1;
  int32 feedback_id = 2;
  float score = 3;
}

message MatchHistoryRequest {
  string user_id = 1;
}

message MatchHistoryResponse {
  repeated Match match_history = 1;
}

message Match {
  string user_id1 = 1;
  string user_id2 = 2;
  string create_time = 3;
  float user_id1_score = 4;
  float user_id2_score = 5;
}