// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "proto/greeter.proto" (package "example", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { Greeter } from './greeter';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { HelloResponse } from './greeter';
import type { HelloRequest } from './greeter';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';
/**
 * @generated from protobuf service example.Greeter
 */
export interface IGreeterClient {
  /**
   * @generated from protobuf rpc: SayHello(example.HelloRequest) returns (example.HelloResponse);
   */
  sayHello(
    input: HelloRequest,
    options?: RpcOptions,
  ): UnaryCall<HelloRequest, HelloResponse>;
}
/**
 * @generated from protobuf service example.Greeter
 */
export class GreeterClient implements IGreeterClient, ServiceInfo {
  typeName = Greeter.typeName;
  methods = Greeter.methods;
  options = Greeter.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: SayHello(example.HelloRequest) returns (example.HelloResponse);
   */
  sayHello(
    input: HelloRequest,
    options?: RpcOptions,
  ): UnaryCall<HelloRequest, HelloResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<HelloRequest, HelloResponse>(
      `unary`,
      this._transport,
      method,
      opt,
      input,
    );
  }
}
